# ------------------------------------
#   If you need English case, you can refer to [s_en.yaml] file
# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 1.0.0
name: web-framework-app
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "aliyunfc"

vars: # 全局变量
  region: "{{ region }}" 
  service:
    name: "{{ serviceName }}"
    description: 'Serverless Devs Web Framework Service'
    nasConfig: auto
    role: "{{ roleArn }}"
services:
  fc-baota-nas-init:
    component: fc
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "nas-init"
        description: 'Prepare nas'
        codeUri: './code/nas-init'
        runtime: python3.9
        timeout: 300
        memorySize: 128
        instanceConcurrency: 1
        handler: app.handler
  fc-baota-web: # 业务名称/模块名称
    # 如果只想针对 framework 下面的业务进行相关操作，可以在命令行中加上 framework，例如：
    # 只对framework进行构建：s framework build
    # 如果不带有 framework ，而是直接执行 s build，工具则会对当前Yaml下，所有和 framework 平级的业务模块（如有其他平级的模块，例如下面注释的next-function），按照一定顺序进行 build 操作
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy: # 在deploy之前运行
        - plugin: remote-nas-config
          args:
            userId: 0
            groupId: 0
            nasDir: '/'
            fcDir: '/mnt/auto'
        - component: fc nas upload -ro code/mdserver-web /mnt/auto/baota
    props: # 组件的属性值
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "baota"
        description: 'Serverless Devs Web Framework Function'
        layers:
          - acs:fc:cn-hangzhou:1735961855122084:layers/baota-base/versions/4
        codeUri: './code/mdserver-web'
        runtime: custom
        timeout: 300
        memorySize: 1536
        caPort: 7200
        instanceConcurrency: 1
        instanceType: e1
        customRuntimeConfig:
          command:
            - bash
          args:
            - '-c'
            - '/mnt/auto/baota/start.sh'
        environmentVariables:
          NODE_PATH: /opt/nodejs/lib/node_modules:/code/node_modules:/usr/local/lib/node_modules
          PYTHONPATH: /opt/python
          PATH: /opt/bin:/opt/nodejs/bin:/code/.s/root/usr/local/bin:/code/.s/root/usr/local/sbin:/code/.s/root/usr/bin:/code/.s/root/usr/sbin:/code/.s/root/sbin:/code/.s/root/bin:/code:/code/node_modules/.bin:/code/.s/python/bin:/code/.s/node_modules/.bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/bin
          KODBOX_URL: ${kodbox.output.url.custom_domain[0].domain}/#explorer/list/path&path=
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: '/*'

  kodbox: # 业务名称/模块名称
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      post-deploy: # 在deploy之前运行
        - plugin: remote-nas-config
          args:
            userId: 0
            groupId: 0
            nasDir: '/'
            fcDir: '/mnt/auto'
        - component: fc nas upload -ro code/kodbox /mnt/auto/kodbox # 要运行的组件，格式为【component: 组件名 命令 参数】（可以通过s cli registry search --type Component 获取组件列表）
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: "kodbox"
        description: 'kodbox Function'
        codeUri: './code/kodbox'
        runtime: custom
        timeout: 7200
        memorySize: 3072
        instanceConcurrency: 16
        caPort: 80
        customRuntimeConfig:
          command:
            - bash
          args:
            - '-c'
            - '/mnt/auto/kodbox/start.sh'
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*

